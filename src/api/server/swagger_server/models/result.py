# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.result_checks import ResultChecks  # noqa: F401,E501
from swagger_server import util


class Result(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, domain: str=None, nameservers: List[str]=None, checks: List[ResultChecks]=None):  # noqa: E501
        """Result - a model defined in Swagger

        :param domain: The domain of this Result.  # noqa: E501
        :type domain: str
        :param nameservers: The nameservers of this Result.  # noqa: E501
        :type nameservers: List[str]
        :param checks: The checks of this Result.  # noqa: E501
        :type checks: List[ResultChecks]
        """
        self.swagger_types = {
            'domain': str,
            'nameservers': List[str],
            'checks': List[ResultChecks]
        }

        self.attribute_map = {
            'domain': 'domain',
            'nameservers': 'nameservers',
            'checks': 'checks'
        }
        self._domain = domain
        self._nameservers = nameservers
        self._checks = checks

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self) -> str:
        """Gets the domain of this Result.

        The domain to be delegated  # noqa: E501

        :return: The domain of this Result.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this Result.

        The domain to be delegated  # noqa: E501

        :param domain: The domain of this Result.
        :type domain: str
        """

        self._domain = domain

    @property
    def nameservers(self) -> List[str]:
        """Gets the nameservers of this Result.

        Name servers as strings  # noqa: E501

        :return: The nameservers of this Result.
        :rtype: List[str]
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers: List[str]):
        """Sets the nameservers of this Result.

        Name servers as strings  # noqa: E501

        :param nameservers: The nameservers of this Result.
        :type nameservers: List[str]
        """

        self._nameservers = nameservers

    @property
    def checks(self) -> List[ResultChecks]:
        """Gets the checks of this Result.

        Results of checks  # noqa: E501

        :return: The checks of this Result.
        :rtype: List[ResultChecks]
        """
        return self._checks

    @checks.setter
    def checks(self, checks: List[ResultChecks]):
        """Sets the checks of this Result.

        Results of checks  # noqa: E501

        :param checks: The checks of this Result.
        :type checks: List[ResultChecks]
        """

        self._checks = checks
